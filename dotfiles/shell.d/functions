#!/usr/bin/env bash

##
## backup - create backup copy of a file/directory
## usage: backup <file_or_directory>
##

backup() {
    cp -r "$1" "$1.old"
}

##
## ex - archive extractor
## usage: ex <file>
##

ex()
{
    if [[ -f $1 ]] ; then
        case $1 in
            *.tar.bz2)   tar xjf "$1"    ;;
            *.tar.gz)    tar xzf "$1"    ;;
            *.bz2)       bunzip2 "$1"    ;;
            *.rar)       unrar x "$1"    ;;
            *.gz)        gunzip "$1"     ;;
            *.tar)       tar xf "$1"     ;;
            *.tbz2)      tar xjf "$1"    ;;
            *.tgz)       tar xzf "$1"    ;;
            *.zip)       unzip "$1"      ;;
            *.Z)         uncompress "$1" ;;
            *.7z)        7z x "$1"       ;;
            *)           echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

##
## mcd - mkdir and cd
## usage: mcd <path/to/new/dir>
##
## If multiple paths are supplied, it creates as many directories and navigates into the
## first one.
##

mcd() {
    mkdir -p "$@" && cd "$1" || return
}

##
## open - wrapper of xdg-open
##
## Defaults to opening the current directory.
## In a WSL, it opens directories with explorer.exe.
##

function open() {
    readonly args=${*:-$PWD}

    # Supports only regular Linux distros and WSL because that's what I use :)
    if [[ ! $OSTYPE =~ linux* ]]; then
        echo "$OSTYPE is not supported"
        return 1
    fi

    if [[ -d $args ]]; then
        if [[ $WSL == true ]]; then
            explorer.exe "$(wslpath -w "$args")" &>/dev/null
        else
            # Silence file manager output
            (xdg-open "$args") > /dev/null 2>&1
        fi
    else
        xdg-open "$args"
    fi
}

##
## targz - create tar.gz archive of a file/directory
## usage: targz <path> [-r]
## options: -r, delete original file/directory
##

targz() {
    tar -zcf "$1".tar.gz "$1"
    [[ $2 == "-r" ]] && rm -r "$1"
}

##
## tmpd - create temporary directory and cd
## usage: tmpd <optional_label>
##

tmpd() {
    local temp_dir
    if [[ $# -eq 0 ]]; then
        temp_dir=$(mktemp -d)
    else
        temp_dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
    fi
    cd "$temp_dir" || return
}

##
## Translation tools
##

lower() { awk '{ print tolower($0) }' <<< "$*"; }
upper() { awk '{ print toupper($0) }' <<< "$*"; }
